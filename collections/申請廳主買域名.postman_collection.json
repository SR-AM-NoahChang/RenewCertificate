{
	"info": {
		"_postman_id": "61cf0593-a74f-4b64-8376-34d91d83f827",
		"name": "Áî≥Ë´ãÂª≥‰∏ªË≤∑ÂüüÂêç",
		"description": "#### **Áî≥Ë´ãÂª≥‰∏ªË≤∑ÂüüÂêç > È©óË≠â workflow ÂÖßÂÆπÊòØÂê¶Ê≠£Á¢∫ > Áî≥Ë´ãÂà™Èô§ÂüüÂêç(Á¢∫‰øù Domain ‰πæÊ∑®)**\n\n- È©óË≠âÊâÄÊúâË™øÁî®ÁöÑ api status code ÁÇ∫**Ê≠£Á¢∫ÁãÄÊÖã**\n    \n- È©óË≠â workflow Áî≥Ë´ãÂñÆËôüÁÇ∫ `{PD_WORKFLOW_ID}`\n    \n- È©óË≠âÂüüÂêçÁÇ∫ **sramtest01.com**\n    \n- È©óË≠â workflow Áî≥Ë´ãÈ°ûÂûãÁÇ∫ **CustomerApplyPurchaseDomain**\n    \n- È©óË≠âÁî≥Ë´ãÂª≥‰∏ªË≤∑ÂüüÂêç workflow Âª∫Á´ãÂæåÊáâËá™ÂãïÁî¢ÁîüÁöÑÊâÄÊúâ Job  \n    (CheckDomainBlocked„ÄÅVerifyTLD„ÄÅUpdateDomainRecord„ÄÅSyncT2„ÄÅRecheckDomainResolution)\n    \n- È©óË≠âÊâÄÊúâ Job ÊúÄÁµÇÁãÄÊÖãÊòØÂê¶ÁÇ∫ **success**",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "42767672"
	},
	"item": [
		{
			"name": "Áî≥Ë´ãÂª≥‰∏ªË≤∑ÂüüÂêç",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"/*",
							"var randomInt = Math.floor(Math.random() * 90000) + 10000;",
							"pm.collectionVariables.set(\"RANDOMNUM\", randomInt);",
							"*/",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);  // Ê™¢Êü• HTTP ÁãÄÊÖãÁ¢ºÊòØÂê¶ÁÇ∫ 201",
							"});",
							"",
							"var responseJson = pm.response.json(); ",
							"var workflowId = responseJson.workflow_id;  ",
							"//pm.collectionVariables.set(\"PD_WORKFLOW_ID\", workflowId);",
							"pm.environment.set(\"PD_WORKFLOW_ID\", workflowId);",
							"",
							"setTimeout(function() {",
							"    console.log(\"Âª∂ÈÅ≤ 1 ÁßíÂæåÂü∑Ë°å‰∏ã‰∏ÄÂÄã API...\");",
							"}, 1000); ",
							"",
							"if (workflowId) {",
							"    // Êñ∞Â¢ûÈÄôÊÆµÔºåËÆì workflow_id Âá∫ÁèæÂú®Â†±ÂëäÁöÑ assertion ‰∏≠",
							"    pm.test(\"workflow_id: \" + workflowId, function () {",
							"        pm.expect(true).to.be.true;",
							"    });",
							"} else {",
							"    pm.test(\"‚ùå workflow_id ‰∏çÂ≠òÂú®\", function () {",
							"        pm.expect.fail(\"ÂõûÊáâ‰∏≠ÁÑ° workflow_id\");",
							"    });",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "X-API-Key",
						"value": "{{PF_KEY}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "\n{\n  \"domain\": \"{{DOMAIN}}\", \n  \"site_group\": \"dctest\",\n  \"force_binding\": true,\n  \"web_layout\": \"normal\",\n  \"apply_certificate\": false,\n  \"apply_third_level_random\": false,\n  \"verify_mode\": \"none\",\n  \"txt\": \"\",\n  \"company_maintenance\": true,\n  \"domain_provider\": \"dctest\",\n  \"provider_account\": \"abc123\",\n  \"provider_password\": \"abc123456\"\n}\n/*\n// ÁÑ°ÊïàÊÜëË≠âÊ∏¨Ë©¶Áî®\n{\n  \"domain\": \"qatest{{RANDOMNUM}}.com\", \n  \"site_group\": \"dctest\",\n  \"force_binding\": true,\n  \"web_layout\": \"normal\",\n  \"apply_certificate\": false,\n  \"apply_third_level_random\": false,\n  \"verify_mode\": \"none\",\n  \"txt\": \"\",\n  \"company_maintenance\": true,\n  \"domain_provider\": \"dctest\",\n  \"provider_account\": \"abc123\",\n  \"provider_password\": \"abc123456\"\n}\n*/\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/workflow_api/pf/application/purchase_domain/customer",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"workflow_api",
						"pf",
						"application",
						"purchase_domain",
						"customer"
					]
				}
			},
			"response": []
		},
		{
			"name": "ÂèñÂæóÂª≥‰∏ªË≤∑ÂüüÂêçË©≥Á¥∞Ë≥áÊñô",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);  // Ê™¢Êü• HTTP ÁãÄÊÖãÁ¢ºÊòØÂê¶ÁÇ∫ 200",
							"});",
							"",
							"// Áî≥Ë´ãÂñÆËôüÊ™¢Êü•",
							"pm.test(\"Áî≥Ë´ãÂñÆËôüÊ™¢Êü•\", function() {",
							"    var responseJson = pm.response.json();  ",
							"    var expectedWorkflowId = pm.variables.get(\"PD_WORKFLOW_ID\"); ",
							"    pm.expect(String(responseJson.workflow_id)).to.eql(String(expectedWorkflowId)); ",
							"});",
							"",
							"// ÂüüÂêçÊ¨Ñ‰ΩçÊ™¢Êü•",
							"pm.test(\"ÂüüÂêçÊ¨Ñ‰ΩçÊ™¢Êü•\", function () {",
							"    var responseJson = pm.response.json();",
							"    var expectedDomain = pm.environment.get(\"DOMAIN\");",
							"",
							"    pm.expect(responseJson.domain).to.eql(expectedDomain);",
							"});",
							"",
							"//Áî≥Ë´ãÈ°ûÂûãÊ™¢Êü•",
							"pm.test(\"Validate workflow_name is Áî≥Ë´ãÂª≥‰∏ªË≤∑ÂüüÂêç\", function() {",
							"    var responseJson = pm.response.json();  ",
							"    pm.expect(responseJson.workflow_name).to.eql(\"CustomerApplyPurchaseDomain\");",
							"});",
							"",
							"// ÂèñÂæó JSON ÂõûÊáâ",
							"let response = pm.response.json();",
							"",
							"// Ê™¢Êü•ÊòØÂê¶Êúâ domain Ê¨Ñ‰Ωç",
							"if (response.domain) {",
							"    pm.collectionVariables.set(\"ran_domain\", response.domain);",
							"    console.log(\"Domain saved to collection variable:\", response.domain);",
							"} else {",
							"    console.warn(\"Domain field not found in response\");",
							"}",
							"",
							"setTimeout(function() {",
							"    console.log(\"Âª∂ÈÅ≤ 5 ÁßíÂæåÂü∑Ë°å‰∏ã‰∏ÄÂÄã API...\");",
							"}, 5000); ",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-API-Key",
						"value": "{{ADM_KEY}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{BASE_URL}}/workflow_api/adm/workflows/{{PD_WORKFLOW_ID}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"workflow_api",
						"adm",
						"workflows",
						"{{PD_WORKFLOW_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "ÂèñÂæóÂª≥‰∏ªË≤∑ÂüüÂêçÈ†ÖÁõÆË≥áÊñô (JobÁãÄÊÖãÊ™¢Êü•)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const expectedNames = [",
							"    \"CheckDomainBlocked\",",
							"    \"VerifyTLD\",",
							"    \"UpdateNameServer\",",
							"    \"UpdateDomainRecord\",",
							"    \"MergeErrorRecord\",",
							"    \"RecheckDomainResolution\",",
							"    \"RemoveTag\"",
							"];",
							"",
							"let responseJson;",
							"",
							"try {",
							"    responseJson = pm.response.json();",
							"    if (!Array.isArray(responseJson)) {",
							"        console.warn(\"‚ö†Ô∏è responseJson ‰∏çÊòØ arrayÔºåÁÑ°Ê≥ïÁπºÁ∫åËôïÁêÜ job\");",
							"        return;",
							"    }",
							"} catch (e) {",
							"    console.error(\"‚ùå ÂõûÂÇ≥‰∏çÊòØ JSONÔºåËß£ÊûêÂ§±Êïó\");",
							"    return;",
							"}",
							"",
							"// ÂÑ≤Â≠ò job_id Âà∞ Collection Variables",
							"expectedNames.forEach(name => {",
							"    const job = responseJson.find(item => item.name === name);  ",
							"    if (job) {",
							"        pm.collectionVariables.set(`${name}_job_id`, job.job_id);",
							"    }",
							"});",
							"",
							"// È©óË≠âÊâÄÊúâ job ÈÉΩÊúâÂõûÂÇ≥",
							"pm.test(\"All expected job names are present\", () => {",
							"    const actualNames = responseJson.map(item => item.name);",
							"    expectedNames.forEach(expectedName => {",
							"        pm.expect(actualNames, `${expectedName} ‰∏çÂú® job ÂõûÊáâ‰∏≠`).to.include(expectedName);",
							"    });",
							"});",
							"",
							"// È©óË≠â‰∏çÂåÖÂê´ failure Êàñ blocked Âç≥ÁÇ∫È©óË≠âÈÄöÈÅé",
							"pm.test(\"ÊâÄÊúâ job ‰∏çÂåÖÂê´ failure Êàñ blocked\", function () {",
							"    const failedOrBlockedJobs = responseJson.filter(job => ",
							"        job.status === \"failure\" || job.status === \"blocked\"",
							"    );",
							"",
							"    if (failedOrBlockedJobs.length > 0) {",
							"        console.log(\"‚ùå ‰ª•‰∏ã job status ÁÇ∫ failure Êàñ blockedÔºö\");",
							"        failedOrBlockedJobs.forEach(job => {",
							"            console.log(`üî¥ Job ID ${job.job_id} [${job.name}] status: ${job.status}, message: ${job.message || \"ÁÑ°Ë®äÊÅØ\"}`);",
							"        });",
							"    }",
							"",
							"    pm.expect(failedOrBlockedJobs.length, \"Ëá≥Â∞ëÊúâ‰∏ÄÂÄã job ÁÇ∫ failure Êàñ blocked\").to.eql(0);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-API-Key",
						"value": "{{ADM_KEY}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{BASE_URL}}/workflow_api/adm/workflows/{{PD_WORKFLOW_ID}}/jobs",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"workflow_api",
						"adm",
						"workflows",
						"{{PD_WORKFLOW_ID}}",
						"jobs"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "PD_WORKFLOW_ID",
			"value": "",
			"type": "string"
		},
		{
			"key": "CheckDomainBlocked_job_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "VerifyTLD_job_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "UpdateNameServer_job_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "UpdateDomainRecord_job_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "MergeErrorRecord_job_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "RecheckDomainResolution_job_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "RemoveTag_job_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "PurchaseAndDeployCert_job_id",
			"value": "",
			"type": "string",
			"disabled": true
		},
		{
			"key": "CheckPurchaseDeployCertificateStatus_job_id",
			"value": "",
			"type": "string",
			"disabled": true
		},
		{
			"key": "RecheckCert_job_id",
			"value": "",
			"type": "string",
			"disabled": true
		},
		{
			"key": "DD_WORKFLOW_ID",
			"value": "",
			"disabled": true
		},
		{
			"key": "DeleteDomainRecord_job_id",
			"value": ""
		},
		{
			"key": "RANDOMNUM",
			"value": ""
		},
		{
			"key": "domain",
			"value": ""
		},
		{
			"key": "ran_domain",
			"value": ""
		}
	]
}