{
	"info": {
		"_postman_id": "399ffbc4-9a0e-48f5-a397-e05e24f37958",
		"name": "Ê∏ÖÈô§Ê∏¨Ë©¶ÂüüÂêç",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "42767672"
	},
	"item": [
		{
			"name": "Áî≥Ë´ãÂà™Èô§ÂüüÂêç",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);  // Ê™¢Êü• HTTP ÁãÄÊÖãÁ¢ºÊòØÂê¶ÁÇ∫ 201",
							"});",
							"",
							"var responseJson = pm.response.json(); ",
							"var workflowId = responseJson.workflow_id;  ",
							"//pm.collectionVariables.set(\"DD_WORKFLOW_ID\", workflowId);",
							"pm.environment.set(\"DD_WORKFLOW_ID\", workflowId);",
							"if (workflowId) {",
							"    // Êñ∞Â¢ûÈÄôÊÆµÔºåËÆì workflow_id Âá∫ÁèæÂú®Â†±ÂëäÁöÑ assertion ‰∏≠",
							"    pm.test(\"dd_workflow_id: \" + workflowId, function () {",
							"        pm.expect(true).to.be.true;",
							"    });",
							"} else {",
							"    pm.test(\"‚ùå dd_workflow_id ‰∏çÂ≠òÂú®\", function () {",
							"        pm.expect.fail(\"ÂõûÊáâ‰∏≠ÁÑ° dd_workflow_id\");",
							"    });",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-api-key",
						"value": "{{PF_KEY}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"domain\": \"{{DOMAIN}}\",\n  \"site_group\": \"dctest\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/workflow_api/pf/application/delete_domain",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"workflow_api",
						"pf",
						"application",
						"delete_domain"
					]
				}
			},
			"response": []
		},
		{
			"name": "ÂèñÂæóÂà™Èô§ÂüüÂêçÁî≥Ë´ãË©≥Á¥∞Ë≥áÊñô",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);  // Ê™¢Êü• HTTP ÁãÄÊÖãÁ¢ºÊòØÂê¶ÁÇ∫ 200",
							"});",
							"",
							"let responseJson = pm.response.json();",
							"",
							"// Áî≥Ë´ãÂñÆËôüÊ™¢Êü•",
							"pm.test(\"Áî≥Ë´ãÂñÆËôüÊ™¢Êü•\", function() {",
							"    var responseJson = pm.response.json();  ",
							"    var expectedWorkflowId = pm.variables.get(\"DD_WORKFLOW_ID\"); ",
							"    pm.expect(String(responseJson.workflow_id)).to.eql(String(expectedWorkflowId));",
							"});",
							"",
							"// ÂüüÂêçÊ¨Ñ‰ΩçÊ™¢Êü•",
							"pm.test(\"ÂüüÂêçÊ¨Ñ‰ΩçÊ™¢Êü•\", function () {",
							"    var responseJson = pm.response.json();",
							"    var expectedDomain = pm.environment.get(\"DOMAIN\");",
							"    ",
							"    pm.expect(responseJson.domain).to.eql(expectedDomain);",
							"});",
							"",
							"// È©óË≠â workflow name ÊòØÂê¶ÁÇ∫‚ÄúÁî≥Ë´ãÂà™Èô§ÂüüÂêç‚Äù",
							"pm.test(\"Validate workflow_name is Áî≥Ë´ãÂà™Èô§ÂüüÂêç\", function() {",
							"    pm.expect(responseJson.workflow_name).to.eql(\"DeleteDomain\");",
							"});",
							"",
							"setTimeout(function() {",
							"    console.log(\"Âª∂ÈÅ≤ 5 ÁßíÂæåÂü∑Ë°å‰∏ã‰∏ÄÂÄã API...\");",
							"}, 5000); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-API-Key",
						"value": "{{ADM_KEY}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{BASE_URL}}/workflow_api/adm/workflows/{{DD_WORKFLOW_ID}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"workflow_api",
						"adm",
						"workflows",
						"{{DD_WORKFLOW_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "ÂèñÂæóÂà™Èô§ÂüüÂêçÈ†ÖÁõÆË≥áÊñô (JobÁãÄÊÖãÊ™¢Êü•)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);  // Ê™¢Êü• HTTP ÁãÄÊÖãÁ¢ºÊòØÂê¶ÁÇ∫ 200",
							"});",
							"",
							"var expectedNames = [",
							"    \"DeleteDomainRecord\"",
							"    //\"SyncT2\"",
							"];",
							"",
							"pm.test(\"All expected names are present in the response\", function () {",
							"    var responseJson = pm.response.json();",
							"",
							"    // ÊèêÂèñÈüøÊáâ‰∏≠ÁöÑÊâÄÊúâ name ÂÄº",
							"    var actualNames = responseJson.map(function(item) {",
							"        return item.name;  // ÊèêÂèñÊØèÂÄã job ÁöÑ name",
							"    });",
							"",
							"    expectedNames.forEach(function(expectedName) {",
							"        pm.expect(actualNames).to.include(expectedName);  // È©óË≠âÂØ¶ÈöõÁöÑ name ÂåÖÂê´È†êÊúüÁöÑ name",
							"    });",
							"});",
							"",
							"// Â≠òÂèñ job ËÆäÊï∏",
							"var responseJson = pm.response.json();",
							"",
							"",
							"responseJson.forEach(function(item) {",
							"    if (item.name === \"DeleteDomainRecord\") {",
							"        pm.collectionVariables.set(\"DeleteDomainRecord_job_id\", item.job_id);  ",
							"    }",
							"    /*",
							"    if (item.name === \"SyncT2\") {",
							"        pm.collectionVariables.set(\"SyncT2_job_id\", item.job_id);  ",
							"    }",
							"    */",
							"});",
							"",
							"// È©óË≠â‰∏çÂåÖÂê´ failure Êàñ blocked Âç≥ÁÇ∫È©óË≠âÈÄöÈÅé",
							"pm.test(\"ÊâÄÊúâ job ‰∏çÂåÖÂê´ failure Êàñ blocked\", function () {",
							"    const failedOrBlockedJobs = responseJson.filter(job => ",
							"        job.status === \"failure\" || job.status === \"blocked\"",
							"    );",
							"",
							"    if (failedOrBlockedJobs.length > 0) {",
							"        console.log(\"‚ùå ‰ª•‰∏ã job status ÁÇ∫ failure Êàñ blockedÔºö\");",
							"        failedOrBlockedJobs.forEach(job => {",
							"            console.log(`üî¥ Job ID ${job.job_id} [${job.name}] status: ${job.status}, message: ${job.message || \"ÁÑ°Ë®äÊÅØ\"}`);",
							"        });",
							"    }",
							"",
							"    pm.expect(failedOrBlockedJobs.length, \"Ëá≥Â∞ëÊúâ‰∏ÄÂÄã job ÁÇ∫ failure Êàñ blocked\").to.eql(0);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-API-Key",
						"value": "{{ADM_KEY}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{BASE_URL}}/workflow_api/adm/workflows/{{DD_WORKFLOW_ID}}/jobs",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"workflow_api",
						"adm",
						"workflows",
						"{{DD_WORKFLOW_ID}}",
						"jobs"
					]
				}
			},
			"response": []
		}
	]
}